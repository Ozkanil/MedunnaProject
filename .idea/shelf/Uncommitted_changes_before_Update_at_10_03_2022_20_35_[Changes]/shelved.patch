Index: src/test/java/utilities/Driver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package stepdefinitions.utilities;\n\nimport io.github.bonigarcia.wdm.WebDriverManager;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.ie.InternetExplorerDriver;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.safari.SafariDriver;\nimport org.openqa.selenium.support.ui.ExpectedCondition;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport java.time.Duration;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\npublic class Driver {\n    //create a driver instance\n    private static WebDriver driver;\n    private static int timeout = 5;\n\n    //What?=>It is just to create, initialize the driver instance.(Singleton driver)\n    //Why?=>We don't want to create and initialize the driver when we don't need\n    //We will create and initialize the driver when it is null\n    //We can use Driver class with different browser(chrome,firefox,headless)\n    private Driver() {\n        //we don't want to create another abject. Singleton pattern\n    }\n\n    //to initialize the driver we create a static method\n    public static WebDriver getDriver() {\n        //create the driver if and only if it is null\n        if (driver == null) {\n            String browser = ConfigurationReader.getProperty(\"browser\");\n            if (\"chrome\".equals(browser)) {\n                WebDriverManager.chromedriver().setup();\n                driver = new ChromeDriver();\n            } else if (\"firefox\".equals(browser)) {\n                WebDriverManager.firefoxdriver().setup();\n                driver = new FirefoxDriver();\n            } else if (\"ie\".equals(browser)) {\n                WebDriverManager.iedriver().setup();\n                driver = new InternetExplorerDriver();\n            } else if (\"safari\".equals(browser)) {\n                WebDriverManager.getInstance(SafariDriver.class).setup();\n                driver = new SafariDriver();\n            } else if (\"chrome-headless\".equals(browser)) {\n                WebDriverManager.chromedriver().setup();\n                driver = new ChromeDriver(new ChromeOptions().setHeadless(true));\n            }\n        }\n//        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n        driver.manage().window().maximize();\n        return driver;\n    }\n\n    public static void closeDriver() {\n        if (driver != null) {//if the driver is pointing chrome\n            driver.quit();//quit the driver\n            driver = null;//set it back to null to make sure driver is null\n            // so I can initialize it again\n            //This is important especially you do cross browser testing(testing with\n            // multiple browser like chrome, firefox, ie etc.)\n        }\n    }\n\n    public static void waitAndClick(WebElement element, int timeout) {\n        for (int i = 0; i < timeout; i++) {\n            try {\n                element.click();\n                return;\n            } catch (WebDriverException e) {\n                wait(1);\n            }\n        }\n    }\n\n    public static void waitAndClick(WebElement element) {\n        for (int i = 0; i < timeout; i++) {\n            try {\n                element.click();\n                return;\n            } catch (WebDriverException e) {\n                wait(1);\n            }\n        }\n    }\n\n\n    public static void waitAndSendText(WebElement element, String text, int timeout) {\n        for (int i = 0; i < timeout; i++) {\n            try {\n                element.sendKeys(text);\n                return;\n            } catch (WebDriverException e) {\n                wait(1);\n            }\n        }\n    }\n\n//    Driver.waitANdSendText(Element , \"TEXT\");\n    public static void waitAndSendText(WebElement element, String text) {\n        for (int i = 0; i < timeout; i++) {\n            try {\n                element.sendKeys(text);\n                return;\n            } catch (WebDriverException e) {\n                wait(1);\n            }\n        }\n    }\n\n    public static void waitAndSendTextWithDefaultTime(WebElement element, String text) {\n        for (int i = 0; i < timeout; i++) {\n            try {\n                element.sendKeys(text);\n                return;\n            } catch (WebDriverException e) {\n                wait(1);\n            }\n        }\n    }\n\n    public static String waitAndGetText(WebElement element, int timeout) {\n        String text = \"\";\n        for (int i = 0; i < timeout; i++) {\n            try {\n                text = element.getText();\n                return text;\n            } catch (WebDriverException e) {\n                wait(1);\n            }\n        }\n        return null;\n    }\n\n\n    //Webdriver\n    //ChromeDriver\n    //Iedriver\n    //FirefoxDriver\n\n    public static void wait2(int sec) {\n        try {\n            Thread.sleep(1000 * sec);\n        } catch (NoSuchElementException e) {\n            e.printStackTrace();\n        } catch (TimeoutException e) {\n            e.printStackTrace();\n        } catch (StaleElementReferenceException e) {\n            e.printStackTrace();\n        } catch (ElementClickInterceptedException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    //5 seconds\n    public static void waitAndClickElement(WebElement element, int seconds) {\n        for (int i = 0; i < seconds; i++) {\n\n            try {\n                element.click();\n                break;\n            } catch (Exception e) {\n                wait2(1);\n            }\n\n\n        }\n    }\n\n    public static void wait(int secs) {\n\n        try {\n            Thread.sleep(1000 * secs);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (TimeoutException e) {\n            e.printStackTrace();\n        } catch (NoSuchElementException e) {\n            e.printStackTrace();\n        } catch (StaleElementReferenceException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static WebElement waitForVisibility(WebElement element, int timeToWaitInSec) {\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), Duration.ofSeconds(timeout));\n        return wait.until(ExpectedConditions.visibilityOf(element));\n    }\n\n    public static WebElement waitForVisibility(By locator, int timeout) {\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), Duration.ofSeconds(timeout));\n        return wait.until(ExpectedConditions.visibilityOfElementLocated(locator));\n    }\n\n    public static Boolean waitForInVisibility(By locator, int timeout) {\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), Duration.ofSeconds(timeout));\n        return wait.until(ExpectedConditions.invisibilityOfElementLocated(locator));\n    }\n\n    public static WebElement waitForClickablility(WebElement element, int timeout) {\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), Duration.ofSeconds(timeout));\n        return wait.until(ExpectedConditions.elementToBeClickable(element));\n    }\n\n    public static WebElement waitForClickablility(By locator, int timeout) {\n        WebDriverWait wait = new WebDriverWait(Driver.getDriver(), Duration.ofSeconds(timeout));\n        return wait.until(ExpectedConditions.elementToBeClickable(locator));\n    }\n\n    public static void waitForPageToLoad(long timeOutInSeconds) {\n        ExpectedCondition<Boolean> expectation = new ExpectedCondition<Boolean>() {\n            public Boolean apply(WebDriver driver) {\n                return ((JavascriptExecutor) driver).executeScript(\"return document.readyState\").equals(\"complete\");\n            }\n        };\n        try {\n            WebDriverWait wait = new WebDriverWait(Driver.getDriver(), Duration.ofSeconds(timeout));\n            wait.until(expectation);\n        } catch (Exception error) {\n            error.printStackTrace();\n        }\n    }\n\n    public static void executeJScommand(WebElement element, String command) {\n        JavascriptExecutor jse = (JavascriptExecutor) Driver.getDriver();\n        jse.executeScript(command, element);\n    }\n\n    public static void selectAnItemFromDropdown(WebElement item, String selectableItem) {\n        wait(5);\n        Select select = new Select(item);\n        for (int i = 0; i < select.getOptions().size(); i++) {\n            if (select.getOptions().get(i).getText().equalsIgnoreCase(selectableItem)) {\n                select.getOptions().get(i).click();\n                break;\n            }\n        }\n\n    }\n\n    /**\n     * Clicks on an element using JavaScript\n     *\n     * @param element\n     */\n    public static void clickWithJS(WebElement element) {\n        ((JavascriptExecutor) Driver.getDriver()).executeScript(\"arguments[0].scrollIntoView(true);\", element);\n        ((JavascriptExecutor) Driver.getDriver()).executeScript(\"arguments[0].click();\", element);\n    }\n\n    /**\n     * Clicks on an element using JavaScript\n     *\n     * @param elements\n     */\n    public static void clickWithJSAsList(List<WebElement> elements) {\n        for (WebElement each : elements) {\n            ((JavascriptExecutor) Driver.getDriver()).executeScript(\"arguments[0].scrollIntoView(true);\", waitForVisibility(each, 5));\n            ((JavascriptExecutor) Driver.getDriver()).executeScript(\"arguments[0].click();\", each);\n        }\n    }\n\n    /**\n     * Performs double click action on an element\n     *\n     * @param element\n     */\n    public static void doubleClick(WebElement element) {\n        new Actions(Driver.getDriver()).doubleClick(element).build().perform();\n    }\n\n//    Parameter1 : WebElement\n//    Parameter2:  String\n//    Driver.selectByVisibleText(dropdown element, \"CHECKING-91303-116.98$\")\n    public static void selectByVisibleText(WebElement element, String text) {\n        Select objSelect = new Select(element);\n        objSelect.selectByVisibleText(text);\n    }\n//    Parameter1 : WebElement\n//    Parameter2:  int\n//    Driver.selectByIndex(dropdown element, 1)\n    public static void selectByIndex(WebElement element, int index) {\n        Select objSelect = new Select(element);\n        objSelect.selectByIndex(index);\n    }\n//    Parameter1 : WebElement\n//    Parameter2:  String\n//    Driver.selectByIndex(dropdown element, \"91303\")\n    public static void selectByValue(WebElement element, String value) {\n        Select objSelect = new Select(element);\n        List<WebElement> elementCount = objSelect.getOptions();\n        objSelect.selectByValue(value);\n        System.out.println(\"number of elements: \" + elementCount.size());\n    }\n\n    public static void sleep(int timeOut) {\n        try {\n            Thread.sleep(timeOut);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void waitAndClickLocationText(WebElement element, String value) {\n        Driver.getDriver().findElement(By.xpath(\"//*[text()='\" + value + \"']\")).click();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/utilities/Driver.java b/src/test/java/utilities/Driver.java
--- a/src/test/java/utilities/Driver.java	(revision d7c9b2a4c74904c3cb0c5a703f2593331bbcd68f)
+++ b/src/test/java/utilities/Driver.java	(date 1646831153277)
@@ -1,4 +1,4 @@
-package stepdefinitions.utilities;
+package utilities;
 
 import io.github.bonigarcia.wdm.WebDriverManager;
 import org.openqa.selenium.*;
@@ -12,6 +12,8 @@
 import org.openqa.selenium.support.ui.ExpectedConditions;
 import org.openqa.selenium.support.ui.Select;
 import org.openqa.selenium.support.ui.WebDriverWait;
+import utilities.ConfigurationReader;
+
 import java.time.Duration;
 import java.util.List;
 import java.util.NoSuchElementException;
Index: src/test/java/stepdefinitions/uistep/RegistrationUISteps.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package stepdefinitions.uistep;\n\nimport com.github.javafaker.Faker;\nimport io.cucumber.java.en.Given;\nimport io.cucumber.java.en.Then;\nimport org.junit.Assert;\nimport pages.RegistrationPage;\nimport pojos.Registrant;\nimport utilities.Driver;\n\nimport static utilities.WriteToTxt.saveRegistrantData;\n\npublic class RegistrationUISteps {\n\n    Registrant registrant = new Registrant();//SAVE DATA AND REUSE DATA\n    Faker faker = new Faker();\n    RegistrationPage rp = new RegistrationPage();//INITIALIZED WEBELEMENTS\n\n\n    @Given(\"user provides ssn id {string}\")\n    public void user_provides_ssn_id(String ssn) {\n\n        ssn = faker.idNumber().ssnValid();\n        registrant.setSsn(ssn);\n        Driver.waitAndSendText(rp.ssnTextBox,ssn);\n\n\n    }\n    @Given(\"user provides firstname and lastname {string} and {string}\")\n    public void user_provides_firstname_and_lastname_and(String firstname, String lastname) {\n\n        firstname = faker.name().firstName();\n        lastname = faker.name().lastName();\n\n        registrant.setFirstName(firstname);\n        registrant.setLastName(lastname);\n\n        Driver.waitAndSendText(rp.firstnameTextBox,firstname);\n        Driver.waitAndSendText(rp.lastnameTextBox,lastname);\n\n\n    }\n    @Then(\"user creates username {string}\")\n    public void user_creates_username(String username) {\n        username = registrant.getFirstName() + registrant.getLastName();\n        registrant.setLogin(username);\n        Driver.waitAndSendText(rp.usernameTextBox,username);\n\n    }\n    @Then(\"user provides also email {string}\")\n    public void user_provides_also_email(String email) {\n\n        email = faker.internet().emailAddress();\n        registrant.setEmail(email);\n        Driver.waitAndSendText(rp.emailTextbox,email);\n    }\n    @Then(\"user generates the password {string}\")\n    public void user_generates_the_password(String password) {\n\n        password = faker.internet().password(8,20, true,true);\n        registrant.setPassword(password);\n        Driver.waitAndSendText(rp.firstPasswordTextBox,password);\n        Driver.waitAndSendText(rp.newPasswordTextBox,password);\n    }\n    @Then(\"user registers and validates\")\n    public void user_registers_and_validates() {\n        Driver.waitAndClick(rp.registerButton);\n        Assert.assertTrue(Driver.waitForVisibility(rp.successMessageToastContainer, 5).isDisplayed());\n    }\n    @Then(\"user creates the records to a correspondent file\")\n    public void user_creates_the_records_to_a_correspondent_file() {\n\n        saveRegistrantData(registrant);\n    }\n\n\n\n    @Given(\"user provides the password {string}\")\n    public void user_provides_the_password(String password) {\n        Driver.waitAndSendText(rp.firstPasswordTextBox,password );\n    }\n    @Then(\"user valides the password strength {string}\")\n    public void user_valides_the_password_strength(String level) {\n\n        if( 1 == Integer.parseInt(level)){\n            Assert.assertTrue(rp.passwordStrength1.isDisplayed());\n        }else if(2 == Integer.parseInt(level)){\n            Assert.assertTrue(rp.passwordStrength2.isDisplayed());\n        }else if(3 == Integer.parseInt(level)){\n            Assert.assertTrue(rp.passwordStrength3.isDisplayed());\n        }\n\n\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/stepdefinitions/uistep/RegistrationUISteps.java b/src/test/java/stepdefinitions/uistep/RegistrationUISteps.java
--- a/src/test/java/stepdefinitions/uistep/RegistrationUISteps.java	(revision d7c9b2a4c74904c3cb0c5a703f2593331bbcd68f)
+++ b/src/test/java/stepdefinitions/uistep/RegistrationUISteps.java	(date 1646831153265)
@@ -12,85 +12,85 @@
 
 public class RegistrationUISteps {
 
-    Registrant registrant = new Registrant();//SAVE DATA AND REUSE DATA
-    Faker faker = new Faker();
-    RegistrationPage rp = new RegistrationPage();//INITIALIZED WEBELEMENTS
-
-
-    @Given("user provides ssn id {string}")
-    public void user_provides_ssn_id(String ssn) {
-
-        ssn = faker.idNumber().ssnValid();
-        registrant.setSsn(ssn);
-        Driver.waitAndSendText(rp.ssnTextBox,ssn);
-
-
-    }
-    @Given("user provides firstname and lastname {string} and {string}")
-    public void user_provides_firstname_and_lastname_and(String firstname, String lastname) {
-
-        firstname = faker.name().firstName();
-        lastname = faker.name().lastName();
-
-        registrant.setFirstName(firstname);
-        registrant.setLastName(lastname);
-
-        Driver.waitAndSendText(rp.firstnameTextBox,firstname);
-        Driver.waitAndSendText(rp.lastnameTextBox,lastname);
+//    Registrant registrant = new Registrant();//SAVE DATA AND REUSE DATA
+//    Faker faker = new Faker();
+//    RegistrationPage rp = new RegistrationPage();//INITIALIZED WEBELEMENTS
+//
+//
+//    @Given("user provides ssn id {string}")
+//    public void user_provides_ssn_id(String ssn) {
+//
+//        ssn = faker.idNumber().ssnValid();
+//        registrant.setSsn(ssn);
+//        //Driver.waitAndSendText(rp.ssnTextBox,ssn);
+//
+//
+//    }
+//    @Given("user provides firstname and lastname {string} and {string}")
+//    public void user_provides_firstname_and_lastname_and(String firstname, String lastname) {
+//
+//        firstname = faker.name().firstName();
+//        lastname = faker.name().lastName();
+//
+//        registrant.setFirstName(firstname);
+//        registrant.setLastName(lastname);
+//
+////        Driver.waitAndSendText(rp.firstnameTextBox,firstname);
+////        Driver.waitAndSendText(rp.lastnameTextBox,lastname);
+//
+//
+//    }
+//    @Then("user creates username {string}")
+//    public void user_creates_username(String username) {
+//        username = registrant.getFirstName() + registrant.getLastName();
+//        registrant.setLogin(username);
+//        //Driver.waitAndSendText(rp.usernameTextBox,username);
+//
+//    }
+//    @Then("user provides also email {string}")
+//    public void user_provides_also_email(String email) {
+//
+//        email = faker.internet().emailAddress();
+//        registrant.setEmail(email);
+//        Driver.waitAndSendText(rp.emailTextbox,email);
+//    }
+//    @Then("user generates the password {string}")
+//    public void user_generates_the_password(String password) {
+//
+//        password = faker.internet().password(8,20, true,true);
+//        registrant.setPassword(password);
+//        Driver.waitAndSendText(rp.firstPasswordTextBox,password);
+//        Driver.waitAndSendText(rp.newPasswordTextBox,password);
+//    }
+//    @Then("user registers and validates")
+//    public void user_registers_and_validates() {
+//        Driver.waitAndClick(rp.registerButton);
+//        Assert.assertTrue(Driver.waitForVisibility(rp.successMessageToastContainer, 5).isDisplayed());
+//    }
+//    @Then("user creates the records to a correspondent file")
+//    public void user_creates_the_records_to_a_correspondent_file() {
+//
+//        saveRegistrantData(registrant);
+//    }
+//
+//
+//
+//    @Given("user provides the password {string}")
+//    public void user_provides_the_password(String password) {
+//        Driver.waitAndSendText(rp.firstPasswordTextBox,password );
+//    }
+//    @Then("user valides the password strength {string}")
+//    public void user_valides_the_password_strength(String level) {
+//
+//        if( 1 == Integer.parseInt(level)){
+//            Assert.assertTrue(rp.passwordStrength1.isDisplayed());
+//        }else if(2 == Integer.parseInt(level)){
+//            Assert.assertTrue(rp.passwordStrength2.isDisplayed());
+//        }else if(3 == Integer.parseInt(level)){
+//            Assert.assertTrue(rp.passwordStrength3.isDisplayed());
+//        }
 
 
     }
-    @Then("user creates username {string}")
-    public void user_creates_username(String username) {
-        username = registrant.getFirstName() + registrant.getLastName();
-        registrant.setLogin(username);
-        Driver.waitAndSendText(rp.usernameTextBox,username);
 
-    }
-    @Then("user provides also email {string}")
-    public void user_provides_also_email(String email) {
 
-        email = faker.internet().emailAddress();
-        registrant.setEmail(email);
-        Driver.waitAndSendText(rp.emailTextbox,email);
-    }
-    @Then("user generates the password {string}")
-    public void user_generates_the_password(String password) {
-
-        password = faker.internet().password(8,20, true,true);
-        registrant.setPassword(password);
-        Driver.waitAndSendText(rp.firstPasswordTextBox,password);
-        Driver.waitAndSendText(rp.newPasswordTextBox,password);
-    }
-    @Then("user registers and validates")
-    public void user_registers_and_validates() {
-        Driver.waitAndClick(rp.registerButton);
-        Assert.assertTrue(Driver.waitForVisibility(rp.successMessageToastContainer, 5).isDisplayed());
-    }
-    @Then("user creates the records to a correspondent file")
-    public void user_creates_the_records_to_a_correspondent_file() {
-
-        saveRegistrantData(registrant);
-    }
-
-
-
-    @Given("user provides the password {string}")
-    public void user_provides_the_password(String password) {
-        Driver.waitAndSendText(rp.firstPasswordTextBox,password );
-    }
-    @Then("user valides the password strength {string}")
-    public void user_valides_the_password_strength(String level) {
-
-        if( 1 == Integer.parseInt(level)){
-            Assert.assertTrue(rp.passwordStrength1.isDisplayed());
-        }else if(2 == Integer.parseInt(level)){
-            Assert.assertTrue(rp.passwordStrength2.isDisplayed());
-        }else if(3 == Integer.parseInt(level)){
-            Assert.assertTrue(rp.passwordStrength3.isDisplayed());
-        }
-
-
-    }
-
-}
Index: src/test/java/stepdefinitions/uisteps/AppointmentAdminSteps.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package stepdefinitions.uisteps;\n\nimport io.cucumber.java.en.Given;\nimport io.cucumber.java.en.Then;\nimport io.cucumber.java.en.When;\nimport org.junit.Assert;\nimport org.openqa.selenium.support.ui.Select;\nimport pages.AppointmentAdminPage;\nimport pages.CommonPage;\nimport pages.CreateOrEditAnAppointmentPage;\nimport pages.SignInPage;\nimport utilities.Driver;\n\npublic class AppointmentAdminSteps {\n    SignInPage signinpage = new SignInPage();\n    CommonPage commonPage = new CommonPage();\n    CreateOrEditAnAppointmentPage createOrEditAnAppointmentPage = new CreateOrEditAnAppointmentPage();\n    AppointmentAdminPage appointmentAdminPage = new AppointmentAdminPage();\n\n\n    @Given(\"user logs in as admin {string},{string}\")\n    public void user_logs_in_as_admin(String username, String password) {\n        Driver.waitAndSendText(signinpage.username,username);\n        Driver.waitAndSendText(signinpage.password,password);\n        Driver.waitAndClick(signinpage.singInButton);\n    }\n    @Given(\"user navigates to appointment page\")\n    public void user_navigates_to_appointment_page() {\n       Driver.waitAndClick(commonPage.ItemsOrTitles);\n       Driver.waitAndClick(commonPage.Appointment);\n    }\n    @Given(\"user clicks to Create a new Appointment button\")\n    public void user_clicks_to_create_a_new_appointment_button() {\n        Driver.waitAndClick(appointmentAdminPage.createANewAppointment);\n\n    }\n    @Given(\"user provides start date time and end date time\")\n    public void user_provides_start_date_time_and_end_date_time() {\n        Driver.waitAndSendText(createOrEditAnAppointmentPage.startDateTime,\"26-07-2022 09:15\");\n        Driver.waitAndSendText(createOrEditAnAppointmentPage.endDateTime,\"29-07-2022 11:30\");\n\n    }\n    @Given(\"user chooses status {string}\")\n    public void user_chooses_status(String string) {\n        Driver.waitAndClick(createOrEditAnAppointmentPage.status);\n        Driver.waitAndClick(createOrEditAnAppointmentPage.pendingOptionOnEditAnAppointment);\n\n    }\n    @Given(\"user provides Anamnesis {string} , Treatment {string} , Diagnosis {string} , Prescription {string} , Description {string}\")\n    public void user_provides_anamnesis_treatment_diagnosis_prescription_description(String anamnesis, String treatment, String diagnosis, String Prescription, String Description) {\n        Driver.waitAndSendText(createOrEditAnAppointmentPage.anamnesis, anamnesis);\n        Driver.waitAndSendText(createOrEditAnAppointmentPage.treatment, treatment);\n        Driver.waitAndSendText(createOrEditAnAppointmentPage.diagnosis, diagnosis);\n        Driver.waitAndSendText(createOrEditAnAppointmentPage.prescription, Prescription);\n        Driver.waitAndSendText(createOrEditAnAppointmentPage.description, Description);\n\n    }\n    @Given(\"user chooses Physician {string}, Patient {string}\")\n    public void user_chooses_physician_patient(String physician, String patient) {\n       Driver.selectByValue(createOrEditAnAppointmentPage.physician,physician);\n       Driver.selectByValue(createOrEditAnAppointmentPage.patient,patient);\n\n    }\n    @When(\"user click on save button\")\n    public void user_click_on_save_button() {\n        Driver.waitAndClick(createOrEditAnAppointmentPage.saveEntity);\n\n    }\n    @Then(\"user validates success message\")\n    public void user_validates_success_message() {\n        Assert.assertTrue( Driver.waitForVisibility(createOrEditAnAppointmentPage.successMessageToastContainer,5).isDisplayed());\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/stepdefinitions/uisteps/AppointmentAdminSteps.java b/src/test/java/stepdefinitions/uisteps/AppointmentAdminSteps.java
--- a/src/test/java/stepdefinitions/uisteps/AppointmentAdminSteps.java	(revision d7c9b2a4c74904c3cb0c5a703f2593331bbcd68f)
+++ b/src/test/java/stepdefinitions/uisteps/AppointmentAdminSteps.java	(date 1646831153285)
@@ -26,8 +26,8 @@
     }
     @Given("user navigates to appointment page")
     public void user_navigates_to_appointment_page() {
-       Driver.waitAndClick(commonPage.ItemsOrTitles);
-       Driver.waitAndClick(commonPage.Appointment);
+//       Driver.waitAndClick(commonPage.ItemsOrTitles);
+//       Driver.waitAndClick(commonPage.Appointment);
     }
     @Given("user clicks to Create a new Appointment button")
     public void user_clicks_to_create_a_new_appointment_button() {
Index: src/test/java/stepdefinitions/SigninStepDefs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package stepdefinitions;\n\nimport io.cucumber.java.bs.A;\nimport io.cucumber.java.en.And;\nimport io.cucumber.java.en.Then;\nimport io.cucumber.java.en.When;\nimport org.junit.Assert;\nimport pages.CommonPage;\nimport pages.RegistrationPage;\nimport pages.SignInPage;\nimport utilities.ConfigReader;\nimport utilities.Driver;\n\npublic class SigninStepDefs {\n\n    SignInPage signInPage=new SignInPage();\n    CommonPage commonPage=new CommonPage();\n    RegistrationPage registrationPage=new RegistrationPage();\n\n//    @When(\"User navigates to the home page\")\n//    public void user_navigates_to_the_home_page() {\n//\n//        Driver.getDriver().get(ConfigReader.getProperty(\"app_url\"));\n//\n//    }\n    @When(\"user clicks sign in button at the home page and navigates to sign in page\")\n    public void user_clicks_sign_in_button_at_the_home_page_and_navigates_to_sign_in_page() {\n\n       commonPage.accountMenu.click();\n       Driver.waitForClickablility(commonPage.signIn,5).click();\n\n    }\n    @Then(\"user verifies that sign in page header is visible\")\n    public void user_verifies_that_sign_in_page_header_is_visible() {\n\n        Driver.waitForVisibility(signInPage.singinPageHeader, 5);\n        Assert.assertTrue(signInPage.singinPageHeader.isDisplayed());\n\n    }\n    @Then(\"user enters username {string} and password {string}\")\n    public void user_enters_username_and_password(String username, String password) {\n\n        signInPage.username.sendKeys(username);\n        signInPage.password.sendKeys(password);\n\n    }\n    @Then(\"user clicks sign in button\")\n    public void user_clicks_sign_in_button() {\n\n        signInPage.singInButton.click();\n\n    }\n    @Then(\"user verifies that sign in is successful\")\n    public void sser_verifies_that_sign_in_is_successful() {\n\n        Assert.assertTrue(commonPage.accountMenu.isDisplayed());\n\n    }\n\n    @And(\"user clicks sign out and verifies sign out\")\n    public void userClicksSignOutAndVerifiesSignOut() {\n\n        commonPage.accountMenu.click();\n        Driver.waitForClickablility(signInPage.signoutButton,5).click();\n        Assert.assertTrue(signInPage.signoutMessage.isDisplayed());\n\n    }\n\n    @Then(\"user verifies that sign in is unsuccessful in case {string}\")\n    public void user_verifies_that_sign_in_is_unsuccessful_in_case(String string) {\n\n        if (Integer.parseInt(string)==1){\n            Driver.waitForVisibility(signInPage.emptyUsernameFailMessage, 5);\n            Assert.assertTrue(signInPage.emptyUsernameFailMessage.isDisplayed());\n            Assert.assertTrue(signInPage.emptyPasswordFailMessage.isDisplayed());\n        }else{\n            Driver.waitForVisibility(signInPage.FailedAlert,5);\n        Assert.assertTrue(signInPage.FailedAlert.isDisplayed());\n    }\n}\n\n    @And(\"user clicks cancel button\")\n    public void userClicksCancelButton() {\n\n        signInPage.cancelButton.click();\n        signInPage.cancelButton.click();\n    }\n\n    @Then(\"user verifies that signin is canceled and user is on home page\")\n    public void userVerifiesThatSigninIsCnacelledAndUserIsOnHomePage() {\n\n        Assert.assertTrue(Driver.waitForVisibility(commonPage.homePageAssertionText,10).isDisplayed());\n\n    }\n\n    @And(\"user verifies that remember me box is visible and clickable\")\n    public void userVerifiesThatRememberMeBoxIsVisibleAndClickable() throws InterruptedException {\n\n        Driver.waitForClickablility(signInPage.rememberMe,10).click();\n        signInPage.rememberMe.click();\n        Thread.sleep(5000);\n        String clickText= signInPage.rememberMe.getAttribute(\"value\");\n        Assert.assertEquals(\"true\", clickText);\n\n    }\n\n    @And(\"user verifies that password reset button is visible and clicks it\")\n    public void userVerifiesThatPasswordResetButtonIsVisibleAndClicksIt() throws InterruptedException {\n\n        Assert.assertTrue(signInPage.passwordResetButton.isDisplayed());\n        Driver.waitForClickablility(signInPage.passwordResetButton,5).click();\n        signInPage.passwordResetButton.click();\n    }\n\n    @Then(\"user verifies that navigated to the password reset page\")\n    public void userVerifiesThatNavigatedToThePasswordResetPage() {\n\n        Assert.assertTrue(signInPage.resetPasswordPageHeader.isDisplayed());\n    }\n\n    @And(\"user verifies that register button is visible and clicks it\")\n    public void userVerifiesThatRegisterButtonIsVisibleAndClicksIt() {\n\n        Assert.assertTrue(signInPage.registrationButtonAtSigninPage.isDisplayed());\n        Driver.waitForClickablility(signInPage.registrationButtonAtSigninPage,5).click();\n        signInPage.registrationButtonAtSigninPage.click();\n    }\n    @Then(\"user verifies that navigated to the registration page\")\n    public void userVerifiesThatNavigatedToTheRegistrationPage() {\n\n        Assert.assertTrue(registrationPage.registrationTitle.isDisplayed());\n    }\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/stepdefinitions/SigninStepDefs.java b/src/test/java/stepdefinitions/SigninStepDefs.java
--- a/src/test/java/stepdefinitions/SigninStepDefs.java	(revision d7c9b2a4c74904c3cb0c5a703f2593331bbcd68f)
+++ b/src/test/java/stepdefinitions/SigninStepDefs.java	(date 1646831153283)
@@ -89,7 +89,7 @@
     @Then("user verifies that signin is canceled and user is on home page")
     public void userVerifiesThatSigninIsCnacelledAndUserIsOnHomePage() {
 
-        Assert.assertTrue(Driver.waitForVisibility(commonPage.homePageAssertionText,10).isDisplayed());
+        //Assert.assertTrue(Driver.waitForVisibility(commonPage.homePageAssertionText,10).isDisplayed());
 
     }
 
